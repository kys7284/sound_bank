<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
 
<mapper namespace="com.boot.sound.exchange.ExchangeDAO">
	<!-- 계좌 조회 -->
	<select id="findAccountByNumber" parameterType="String" resultType="com.boot.sound.inquire.account.AccountDTO">
	  SELECT * FROM account_tbl
	  WHERE account_number = #{account_number}
	</select>
	
	<!-- 계좌 잔액 업데이트 -->
	<update id="updateAccountBalance" parameterType="com.boot.sound.inquire.account.AccountDTO">
	  UPDATE account_tbl
	  SET balance = #{balance}
	  WHERE account_number = #{account_number}
	</update>
	
	<!-- 지갑 존재 여부 확인 -->
	<select id="findByCustomerAndCurrency" resultType="int">
	  SELECT COUNT(*) FROM exchange_wallet
	  WHERE customer_id = #{customer_id}
	    AND currency_code = #{currency_code}
	</select>
	
	<!-- 지갑 생성 -->
	<insert id="insertWallet" useGeneratedKeys="true" keyProperty="wallet_id">
	  INSERT INTO exchange_wallet (customer_id, currency_code, balance, status)
	  VALUES (#{customer_id}, #{currency_code}, #{balance}, #{status})
	</insert>
	
	<!-- 지갑 잔액 업데이트 -->
	<update id="updateWalletBalance" parameterType="com.boot.sound.exchange.ExchangeWalletDTO">
	  UPDATE exchange_wallet
	  SET balance = #{balance}, updated_at = CURRENT_TIMESTAMP
	  WHERE customer_id = #{customer_id}
	    AND currency_code = #{currency_code}
	</update>
	
	<!-- 환전 내역 저장 -->
	<insert id="chargeWallet" parameterType="com.boot.sound.exchange.ExchangeTransactionDTO">
	  INSERT INTO exchange_transaction (
	    customer_id, withdraw_account_number, currency_code, from_currency, to_currency,
	    request_amount, exchanged_amount, exchange_rate, transaction_type ,exchange_transaction_date, base_date
	  )
	  VALUES (
	    #{customer_id}, #{withdraw_account_number}, #{currency_code}, #{from_currency}, #{to_currency},
	    #{request_amount}, #{exchanged_amount},#{exchange_rate},#{transaction_type} , NOW(), CURDATE()
	  )
	</insert>
	
	<!-- 방금 거래한 환전 내역 조회 -->
	<select id="findTransById" resultType="com.boot.sound.exchange.ExchangeTransactionDTO">
	  SELECT * FROM exchange_transaction
	  WHERE customer_id = #{customer_id}
	  ORDER BY exchange_transaction_date DESC
	  LIMIT 1
	</select>
	
	<!-- 지갑 여부조회 -->
	<select id="findWalletByCustomerAndCurrency" resultType="com.boot.sound.exchange.ExchangeWalletDTO">
	   SELECT * FROM exchange_wallet
	   WHERE customer_id = #{customer_id}
	     AND currency_code = #{currency_code}
	</select>
  
	<select id="findAccountById" parameterType="String" resultType="com.boot.sound.inquire.account.AccountDTO">
		SELECT * FROM ACCOUNT_TBL
		WHERE CUSTOMER_ID = #{customer_id} 
	</select>
	
	<select id="getListById" parameterType="String" resultType="com.boot.sound.exchange.ExchangeTransactionDTO">
		SELECT *
        FROM exchange_transaction
        WHERE customer_id = #{customer_id}
        ORDER BY exchange_transaction_date DESC
	</select>
	
	<!-- 지갑조회 -->
	<select id="myWallet" parameterType="String" resultType="com.boot.sound.exchange.ExchangeWalletDTO">
		SELECT *
		FROM exchange_wallet
		WHERE CUSTOMER_ID = #{customer_id}
		AND BALANCE > 0
	</select>
	
	<!-- 날짜별로 DB에 환율 자동저장 -->
	<insert id="insertExchangeRate" parameterType="map">
	    INSERT INTO exchange_rate (
	        base_date,
	        currency_code,
	        currency_name,
	        base_rate,
	        buy_rate,
	        sell_rate
	    )
	    VALUES (
	        #{base_date},
	        #{currency_code},
	        #{currency_name},
	        #{base_rate},
	        #{buy_rate},
	        #{sell_rate}
	    )
	</insert>
	
	<!-- 고객 지갑 목록 + 평균 매입 환율 조회 -->
	<select id="findWalletsWithAvgRate" resultType="com.boot.sound.exchange.ExchangeWalletDTO" parameterType="String">
	  SELECT 
	    ew.wallet_id,
	    ew.customer_id,
	    ew.currency_code,
	    ew.balance,
	    ew.created_at,
	    ew.updated_at,
	    ew.status,
	    IFNULL(avg_rates.average_rate, 0) AS average_rate
	  FROM exchange_wallet ew
	  LEFT JOIN (
	    SELECT 
	      et.customer_id,
	      et.currency_code,
	      AVG(er.base_rate) AS average_rate
	    FROM exchange_transaction et
	    JOIN exchange_rate er
	      ON et.base_date = er.base_date AND et.currency_code = er.currency_code
	    WHERE et.transaction_type = 'buy'
	    GROUP BY et.customer_id, et.currency_code
	  ) avg_rates
	    ON ew.customer_id = avg_rates.customer_id
	    AND ew.currency_code = avg_rates.currency_code
	  WHERE ew.customer_id = #{customer_id}
	    AND ew.balance > 0
	  ORDER BY ew.wallet_id DESC
	</select>
	
	<!-- DB저장 환율 조회 -->
	<select id="getRateByDate" parameterType="String" resultType="java.util.Map">
		SELECT * FROM exchange_rate
		where base_date = #{base_date}
	</select>
	
</mapper>   